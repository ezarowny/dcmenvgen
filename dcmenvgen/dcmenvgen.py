import argparse
import copy
import cPickle
import deployment
import hierarchy
import os
import random
import sys
import utils


def generate(args):
    patients = hierarchy.generate_patients(args.num_patients)
    if args.verbose:
        utils.print_history(patients, True)
    if os.path.isfile(args.output_file):
        overwrite = raw_input('{0} already exists, overwrite? [y/n]: '.format(
            args.output_file))
        if overwrite == 'n':
            sys.exit()
    with open(args.output_file, 'wb') as out_file:
        cPickle.dump(patients, out_file, 2)


def view(args):
    with open(args.patients_file, 'rb') as in_file:
        patients = cPickle.load(in_file)
    utils.print_history(patients, args.verbose)


def populate(args):
    with open(args.patients_file, 'rb') as in_file:
        patients = cPickle.load(in_file)
    utils.create_dicom_files(patients, args.output_directory)


def deploy(args):
    if not deployment.check_directories(args.deploy_dir):
        deployment.setup_directories(args.deploy_dir)
        deployment.create_ae_config(args.deploy_dir)
        deployment.distribute_images(args.dicom_dir, args.deploy_dir)
    deployment.launch(args.deploy_dir)


def order(args):
    with open(args.patients_file, 'rb') as in_file:
        patients = cPickle.load(in_file)
    ordered = []
    for x in xrange(args.number):
        patient = random.choice(patients)
        temp_patient = copy.deepcopy(patient)
        if patient.studies:
            last_study_date = patient.studies[-1].study_datetime
        else:
            last_study_date = patient.birth_date
        temp_patient.studies = [hierarchy.Study(last_study_date)]
        ordered.append(temp_patient)
    utils.create_dicom_files(ordered, args.output_directory, True)
    for study_dir in os.listdir(args.output_directory):
        study_dir_path = os.path.join(args.output_directory, study_dir)
        utils.send_dicom_files(study_dir_path, args.ae_title, args.ip,
                               args.port)


def main():
    parser = argparse.ArgumentParser(description='DICOM environment generator',
                                     prog='dcmenvgen')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')
    subparsers = parser.add_subparsers(title='commands', metavar='<command>')

    # create the parser for the "generate" command
    parser_gen = subparsers.add_parser('generate', help='generate patients')
    parser_gen.add_argument('num_patients', type=int,
                            help='number of patients to generate')
    parser_gen.add_argument('-o', '--output_file', default='patients.pkl',
                            help='file to output patients to')
    parser_gen.add_argument('-v', '--verbose', action='store_true',
                            help='verbose output')
    parser_gen.set_defaults(func=generate)

    # create the parser for the "view" command
    parser_view = subparsers.add_parser('view', help='view generated patients')
    parser_view.add_argument('patients_file',
                             help='patients file generated by dcmenvgen')
    parser_view.add_argument('-v', '--verbose', action='store_true',
                             help='verbose output')
    parser_view.set_defaults(func=view)

    # create the parser for the "populate" command
    parser_pop = subparsers.add_parser('populate', help='populate dicom files')
    parser_pop.add_argument('patients_file',
                            help='patients file generated by dcmenvgen')
    parser_pop.add_argument('-o', '--output_directory', default='dicom',
                            help='directory to place populated DICOM files')
    parser_pop.set_defaults(func=populate)

    # create the parser for the "deploy" command
    parser_dep = subparsers.add_parser('deploy',
                                       help='deploy workstations and archives')
    parser_dep.add_argument('dicom_dir',
                            help='directory of dicom files to deploy')
    parser_dep.add_argument('-o', '--deploy_dir', default='deploy',
                            help='directory to deploy to')
    parser_dep.add_argument('-d', '--dcmtk_dir',
                            help='directory of dcmtk binaries')
    parser_dep.set_defaults(func=deploy)

    # create the parser for the "order" command
    parser_order = subparsers.add_parser(
        'order', help='order new studies for existing patients')
    parser_order.add_argument('number', type=int, help='number to add')
    parser_order.add_argument('patients_file',
                              help='patients file generated by dcmenvgen')
    parser_order.add_argument('ae_title', help='destination ae title')
    parser_order.add_argument('ip', help='destination ip address')
    parser_order.add_argument('port', help='destination port')
    parser_order.add_argument('-o', '--output_directory', default='ordered',
                              help='directory to place ordered studies')
    parser_order.set_defaults(func=order)

    # call the function indicated by the selected subparser
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
